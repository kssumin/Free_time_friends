"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // error code
// 101: ObjectNotFound
// 102: InvalidQuery

var _express = require("express");

var _querystring = require("querystring");

var _querystring2 = _interopRequireDefault(_querystring);

var _oauth = require("oauth");

var _path2 = require("path");

var _path3 = _interopRequireDefault(_path2);

var _ParseRest = require("./ParseRest");

var _ParseRest2 = _interopRequireDefault(_ParseRest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function qsStringify(str) {
  var oldEscape = _querystring2.default.escape;
  _querystring2.default.escape = function (q) {
    return q;
  };
  var stringified = _querystring2.default.stringify(str);
  _querystring2.default.escape = oldEscape;
  return stringified;
}

// keep user info to session = default
function defaultUserHandler(req, _user) {
  // error
  if (!_user) return {};

  // login results
  if (_typeof(req.session) === "object") {
    if (_user.sessionToken) req.session.sessionToken = _user.sessionToken;

    req.session.user = _user;
    req.session.user.sessionToken = req.session.sessionToken;

    return req.session.user;
  }
  return _user;
}

function keyConverter(_envKey) {
  var returnKey = _envKey;

  if ((typeof _envKey === "undefined" ? "undefined" : _typeof(_envKey)) === "object" && Array.isArray(_envKey)) {
    var _envKey2 = _slicedToArray(_envKey, 1);

    returnKey = _envKey2[0];
  } else if (typeof _envKey === "string" && _envKey.indexOf("[") > -1) {
    var _JSON$parse = JSON.parse(_envKey);

    var _JSON$parse2 = _slicedToArray(_JSON$parse, 1);

    returnKey = _JSON$parse2[0];
  }

  return returnKey;
}

function fbOAuth2() {
  var appId = keyConverter(process.env.FB_APPIDS);
  var secret = keyConverter(process.env.FB_SECRETS);
  return new _oauth.OAuth2(appId, secret, "", "https://www.facebook.com/dialog/oauth", "https://graph.facebook.com/oauth/access_token", null);
}

function googleOAuth2() {
  var appId = keyConverter(process.env.GOOGLE_APPIDS);
  var secret = keyConverter(process.env.GOOGLE_SECRETS);
  return new _oauth.OAuth2(appId, secret, "", "https://accounts.google.com/o/oauth2/v2/auth", "https://www.googleapis.com/oauth2/v4/token", null);
}

function instaOAuth2() {
  var appId = keyConverter(process.env.INSTA_APPIDS);
  var secret = keyConverter(process.env.INSTA_SECRETS);
  return new _oauth.OAuth2(appId, secret, "", "https://api.instagram.com/oauth/authorize/", "https://api.instagram.com/oauth/access_token", null);
}

function naverOAuth2() {
  var appId = keyConverter(process.env.NAVER_APPIDS);
  var secret = keyConverter(process.env.NAVER_SECRETS);
  return new _oauth.OAuth2(appId, secret, "", "https://nid.naver.com/oauth2.0/authorize", "https://nid.naver.com/oauth2.0/token", null);
}

function daumOAuth2() {
  var appId = keyConverter(process.env.DAUM_APPIDS);
  var secret = keyConverter(process.env.DAUM_SECRETS);
  return new _oauth.OAuth2(appId, secret, "", "https://apis.daum.net/oauth2/authorize", "https://apis.daum.net/oauth2/token", null);
}

function kakaoOAuth2() {
  var appId = keyConverter(process.env.KAKAO_RESTKEY);
  var secret = keyConverter(process.env.KAKAO_SECRETS);
  return new _oauth.OAuth2(appId, secret, "", "https://kauth.kakao.com/oauth/authorize", "https://kauth.kakao.com/oauth/token", null);
}

function makeRedirectUri(req, uri) {
  var _host = req.get("host");

  // query keep to session store
  var _req$query = req.query,
      callback = _req$query.callback,
      host = _req$query.host;

  if (_typeof(req.session) === "object" && (callback || host)) {
    req.session.oauth2 = { callback: callback, host: host };
  }

  // host from session store
  if (req.session.oauth2 && req.session.oauth2.host) _host = req.session.oauth2.host;

  // redirect_uri
  var redirectUri = (req.headers["x-forwarded-proto"] === "https" || req.secure ? "https" : "http") + "://" + _path3.default.join(_host, uri);
  return redirectUri;
}

function callbackResult(req, res, authData) {
  if (_typeof(req.session) === "object" && req.session.oauth2 && req.session.oauth2.callback) {
    var callback = req.session.oauth2.callback;

    var joint = callback.indexOf("?") > -1 ? "&" : "?";
    return res.redirect(callback + joint + qsStringify(authData));
  }
  return res.json(authData);
}

var SocialOAuth2 = function () {
  _createClass(SocialOAuth2, null, [{
    key: "create",

    /**
     * @param {Object?} api - Express router
     * @return {Object} express router
     */
    value: function create(options) {
      var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _express.Router)();

      var router = new SocialOAuth2(options);

      // facebook
      api.get("/facebook/auth", function (req, res) {
        return router.facebookAuth(req, res);
      });
      api.get("/facebook/callback", function (req, res) {
        return router.facebookCallback(req, res);
      });
      api.post("/facebook/login", function (req, res) {
        return router.facebookLogin(req, res);
      });

      // google
      api.get("/google/auth", function (req, res) {
        return router.googleAuth(req, res);
      });
      api.get("/google/callback", function (req, res) {
        return router.googleCallback(req, res);
      });
      api.post("/google/login", function (req, res) {
        return router.googleLogin(req, res);
      });

      // instagram
      api.get("/instagram/auth", function (req, res) {
        return router.instagramAuth(req, res);
      });
      api.get("/instagram/callback", function (req, res) {
        return router.instagramCallback(req, res);
      });
      api.post("/instagram/login", function (req, res) {
        return router.instagramLogin(req, res);
      });
      api.post("/instagram/link", function (req, res) {
        return router.instagramLink(req, res);
      });
      api.get("/instagram/recent", function (req, res) {
        return router.instagramRecent(req, res);
      });

      // naver
      api.get("/naver/auth", function (req, res) {
        return router.naverAuth(req, res);
      });
      api.get("/naver/callback", function (req, res) {
        return router.naverCallback(req, res);
      });
      api.post("/naver/login", function (req, res) {
        return router.naverLogin(req, res);
      });

      // daum
      api.get("/daum/auth", function (req, res) {
        return router.daumAuth(req, res);
      });
      api.get("/daum/callback", function (req, res) {
        return router.daumCallback(req, res);
      });
      api.post("/daum/login", function (req, res) {
        return router.daumLogin(req, res);
      });

      // kakao
      api.get("/kakao/auth", function (req, res) {
        return router.kakaoAuth(req, res);
      });
      api.get("/kakao/callback", function (req, res) {
        return router.kakaoCallback(req, res);
      });
      api.post("/kakao/login", function (req, res) {
        return router.kakaoLogin(req, res);
      });

      return api;
    }
  }]);

  function SocialOAuth2(options) {
    _classCallCheck(this, SocialOAuth2);

    var _path = options.path;

    // facebook
    this.fbOAuth2 = fbOAuth2();
    this.fbRedirectUri = _path3.default.join(_path, "/facebook/callback");

    // google
    this.googleOAuth2 = googleOAuth2();
    this.googleRedirectUri = _path3.default.join(_path, "/google/callback");

    // instagram
    this.instaOAuth2 = instaOAuth2();
    this.instaRedirectUri = _path3.default.join(_path, "/instagram/callback");

    // naver
    this.naverOAuth2 = naverOAuth2();
    this.naverRedirectUri = _path3.default.join(_path, "/naver/callback");

    // daum
    this.daumOAuth2 = daumOAuth2();
    this.daumRedirectUri = _path3.default.join(_path, "/daum/callback");

    // kakao
    this.kakaoOAuth2 = kakaoOAuth2();
    this.kakaoRedirectUri = _path3.default.join(_path, "/kakao/callback");

    // userHandler
    var _userHandler = options.userHandler || defaultUserHandler;

    this.userHandler = function (_req, user) {
      return new Promise(function (resolve) {
        if (typeof _userHandler.then == "function") {
          _userHandler(_req, user).then(resolve);
        } else {
          setTimeout(function () {
            return resolve(_userHandler(_req, user));
          }, 0);
        }
      });
    };
  }

  //
  // facebook
  //


  _createClass(SocialOAuth2, [{
    key: "facebookAuth",
    value: function facebookAuth(req, res) {
      // For eg. "http://localhost:3000/facebook/callback"
      var params = {
        redirect_uri: makeRedirectUri(req, this.fbRedirectUri),
        scope: "email,public_profile"
      };
      console.log("params", params);
      return res.redirect(this.fbOAuth2.getAuthorizeUrl(params));
    }
  }, {
    key: "facebookCallback",
    value: function facebookCallback(req, res) {
      if (req.error_reason) {
        res.send(req.error_reason);
      }
      if (req.query && req.query.code) {
        // For eg. "/facebook/callback"
        this.fbOAuth2.getOAuthAccessToken(req.query.code, {
          grant_type: "authorization_code",
          redirect_uri: makeRedirectUri(req, this.fbRedirectUri)
        }, function (err, accessToken, refreshToken, params) {
          if (err) {
            console.error(err);
            return res.send(err);
          }

          var facebookAuth = {
            access_token: accessToken,
            expiration_date: params.expires
          };
          // when custom callback
          return callbackResult(req, res, facebookAuth);
        });
      }
    }

    /**
     * @param {String} accessToken
     * @return {Object} parse user
     */

  }, {
    key: "facebookLogin",
    value: function facebookLogin(req, res) {
      var _this = this;

      var _req$body = req.body,
          body = _req$body === undefined ? {} : _req$body,
          _req$session = req.session,
          session = _req$session === undefined ? {} : _req$session;

      console.log("body", body);
      console.log("session", session);
      var accessToken = body.access_token || session.access_token;
      var expires = body.expiration_date || session.expiration_date;
      if (!accessToken) return res.status(500).json({ code: 101, error: "Invalid facebook access_token" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      // https://developers.facebook.com/docs/graph-api/reference/v2.2/user
      this.fbOAuth2.get("https://graph.facebook.com/me?fields=id,name,email", accessToken, function (err, data /* , response */) {
        if (err) {
          return errorFn(err);
        }

        var profile = JSON.parse(data);
        console.log(profile);
        var profileImageUrl = "https://graph.facebook.com/" + profile.id + "/picture";

        var authData = {
          facebook: {
            id: profile.id,
            access_token: accessToken,
            expiration_date: expires
          }
        };

        if (!profile.email) return errorFn({ code: 101, error: "Email is unknown" });

        var parseRest = new _ParseRest2.default(req);
        parseRest.get("/users", { where: { username: profile.email } }, { useMasterKey: true }).then(function (users) {
          if (users && users[0]) {
            // Retrieving
            var user = users[0];
            // ban user
            if (user.isBanned) return errorFn({ code: 101, error: "User is banned" });
            // save param
            var _param2 = { socialType: "facebook", authData: authData };
            parseRest.put("/users/" + user.objectId, _param2, { useMasterKey: true }).then(function () {
              // session query
              parseRest.get("/sessions", {
                where: {
                  user: {
                    __type: "Pointer",
                    className: "_User",
                    objectId: user.objectId
                  }
                }
              }, { useMasterKey: true }).then(function (sessions) {
                if (sessions && sessions[0]) {
                  var _session = sessions[0];
                  if (_typeof(req.session) === "object") req.session.sessionToken = _session.sessionToken;
                  // end
                  return _this.userHandler(req, _extends({}, user, _param2, {
                    sessionToken: _session.sessionToken
                  })).then(function (handledUser) {
                    return res.json(handledUser);
                  });
                }
                // login
                var password = typeof profile.id === "number" ? profile.id.toString() : profile.id;
                return parseRest.put("/users/" + user.objectId, { password: password }, { useMasterKey: true }).then(function () {
                  return parseRest.get("/login", {
                    username: profile.email,
                    password: password
                  }).then(function (result) {
                    // reload
                    parseRest.get("/users/me", null, {
                      "X-Parse-Session-Token": result.sessionToken
                    }).then(function (_user) {
                      // end
                      return _this.userHandler(req, _extends({}, _user, {
                        sessionToken: result.sessionToken
                      })).then(function (handledUser) {
                        return res.json(handledUser);
                      });
                    }, errorFn);
                  }, errorFn);
                }, errorFn);
              }, errorFn);
            }, errorFn);
          } else {
            // New
            var _user2 = {
              username: profile.email,
              password: typeof profile.id === "number" ? profile.id.toString() : profile.id,
              name: profile.name,
              email: profile.email,
              socialType: "facebook",
              socialProfile: profile,
              profileImage: { url: profileImageUrl },
              authData: authData
            };
            parseRest.post("/users", _user2, { useMasterKey: true }).then(function (result) {
              // reload
              parseRest.get("/users/me", null, {
                "X-Parse-Session-Token": result.sessionToken
              }).then(function (_user) {
                // end
                return _this.userHandler(req, _extends({}, _user, {
                  sessionToken: result.sessionToken
                })).then(function (handledUser) {
                  return res.json(handledUser);
                });
              }, errorFn);
            }, errorFn);
          }
        }, errorFn);
      });
    }

    //
    // google
    //

  }, {
    key: "googleAuth",
    value: function googleAuth(req, res) {
      // For eg. "http://localhost:3000/google/callback"
      var params = {
        redirect_uri: makeRedirectUri(req, this.googleRedirectUri),
        scope: "email profile",
        response_type: "code"
      };
      console.log("params", params);
      return res.redirect(this.googleOAuth2.getAuthorizeUrl(params));
    }
  }, {
    key: "googleCallback",
    value: function googleCallback(req, res) {
      if (req.error_reason) {
        res.send(req.error_reason);
      }
      if (req.query && req.query.code) {
        // For eg. "/google/callback"
        this.googleOAuth2.getOAuthAccessToken(req.query.code, {
          grant_type: "authorization_code",
          redirect_uri: makeRedirectUri(req, this.googleRedirectUri)
        }, function (err, accessToken, refreshToken, params) {
          if (err) {
            console.error(err);
            return res.send(err);
          }

          var googleAuth = {
            access_token: accessToken,
            expiration_date: params.expires_in
          };
          // when custom callback
          return callbackResult(req, res, googleAuth);
        });
      }
    }

    /**
     * @param {String} accessToken
     * @return {Object} parse user
     */

  }, {
    key: "googleLogin",
    value: function googleLogin(req, res) {
      var _this2 = this;

      var _req$body2 = req.body,
          body = _req$body2 === undefined ? {} : _req$body2,
          _req$session2 = req.session,
          session = _req$session2 === undefined ? {} : _req$session2;

      console.log("body", body);
      console.log("session", session);
      var accessToken = body.access_token || session.access_token;
      var expires = body.expiration_date || session.expiration_date;
      if (!accessToken) return res.status(500).json({ code: 101, error: "Invalid google access_token" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      // https://developers.google.com/oauthplayground
      this.googleOAuth2.get("https://www.googleapis.com/oauth2/v2/userinfo", accessToken, function (err, data /* , response */) {
        if (err) {
          return errorFn(err);
        }

        var profile = JSON.parse(data);
        console.log(profile);
        var profileImageUrl = profile.picture;

        var authData = {
          google: {
            id: profile.id,
            access_token: accessToken,
            expiration_date: expires
          }
        };

        if (!profile.email) return errorFn({ code: 101, error: "Email is unknown" });

        var parseRest = new _ParseRest2.default(req);
        parseRest.get("/users", { where: { username: profile.email } }, { useMasterKey: true }).then(function (users) {
          if (users && users[0]) {
            // Retrieving
            var user = users[0];
            // ban user
            if (user.isBanned) return errorFn({ code: 101, error: "User is banned" });
            // save param
            var _param3 = { socialType: "google", authData: authData };
            parseRest.put("/users/" + user.objectId, _param3, { useMasterKey: true }).then(function () {
              // session query
              parseRest.get("/sessions", {
                where: {
                  user: {
                    __type: "Pointer",
                    className: "_User",
                    objectId: user.objectId
                  }
                }
              }, { useMasterKey: true }).then(function (sessions) {
                if (sessions && sessions[0]) {
                  var _session = sessions[0];
                  if (_typeof(req.session) === "object") req.session.sessionToken = _session.sessionToken;
                  // end
                  return _this2.userHandler(req, _extends({}, user, _param3, {
                    sessionToken: _session.sessionToken
                  })).then(function (handledUser) {
                    return res.json(handledUser);
                  });
                }
                // login
                var password = typeof profile.id === "number" ? profile.id.toString() : profile.id;
                return parseRest.put("/users/" + user.objectId, { password: password }, { useMasterKey: true }).then(function () {
                  return parseRest.get("/login", {
                    username: profile.email,
                    password: password
                  }).then(function (result) {
                    // reload
                    parseRest.get("/users/me", null, {
                      "X-Parse-Session-Token": result.sessionToken
                    }).then(function (_user) {
                      // end
                      return _this2.userHandler(req, _extends({}, _user, {
                        sessionToken: result.sessionToken
                      })).then(function (handledUser) {
                        return res.json(handledUser);
                      });
                    }, errorFn);
                  }, errorFn);
                }, errorFn);
              }, errorFn);
            }, errorFn);
          } else {
            // New
            var _user3 = {
              username: profile.email,
              password: typeof profile.id === "number" ? profile.id.toString() : profile.id,
              name: profile.name,
              email: profile.email,
              socialType: "google",
              socialProfile: profile,
              profileImage: { url: profileImageUrl },
              authData: authData
            };
            parseRest.post("/users", _user3, { useMasterKey: true }).then(function (result) {
              // reload
              parseRest.get("/users/me", null, {
                "X-Parse-Session-Token": result.sessionToken
              }).then(function (_user) {
                // end
                return _this2.userHandler(req, _extends({}, _user, {
                  sessionToken: result.sessionToken
                })).then(function (handledUser) {
                  return res.json(handledUser);
                });
              }, errorFn);
            }, errorFn);
          }
        }, errorFn);
      });
    }

    //
    // instagram
    //

  }, {
    key: "instagramAuth",
    value: function instagramAuth(req, res) {
      // For eg. "http://localhost:3000/instagram/callback"
      var params = {
        redirect_uri: makeRedirectUri(req, this.instaRedirectUri),
        scope: "basic public_content",
        response_type: "code"
      };
      console.log("params", params);
      return res.redirect(this.instaOAuth2.getAuthorizeUrl(params));
    }
  }, {
    key: "instagramCallback",
    value: function instagramCallback(req, res) {
      if (req.error_reason) {
        res.send(req.error_reason);
      }
      if (req.query && req.query.code) {
        // For eg. "/instagram/callback"
        this.instaOAuth2.getOAuthAccessToken(req.query.code, {
          grant_type: "authorization_code",
          redirect_uri: makeRedirectUri(req, this.instaRedirectUri)
        }, function (err, accessToken, refreshToken, params) {
          if (err) {
            console.error(err);
            return res.send(err);
          }

          var instagramAuth = {
            access_token: accessToken,
            user: params.user
          };
          // when custom callback
          return callbackResult(req, res, instagramAuth);
        });
      }
    }

    /**
     * @param {String} accessToken
     * @return {Object} parse user
     */

  }, {
    key: "instagramLogin",
    value: function instagramLogin(req, res) {
      var _this3 = this;

      var _req$body3 = req.body,
          body = _req$body3 === undefined ? {} : _req$body3,
          _req$session3 = req.session,
          session = _req$session3 === undefined ? {} : _req$session3;

      console.log("body", body);
      console.log("session", session);
      var accessToken = body.access_token || session.access_token;
      if (!accessToken) return res.status(500).json({ code: 101, error: "Invalid instagram access_token" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      // https://www.instagram.com/developer/endpoints/users/
      this.instaOAuth2.get("https://api.instagram.com/v1/users/self/", accessToken, function (err, data /* , response */) {
        if (err) {
          return errorFn(err);
        }

        var profile = JSON.parse(data).data;
        console.log(profile);

        var authData = {
          instagram: {
            id: profile.id,
            access_token: accessToken
          }
        };

        if (!profile.username) return errorFn({ code: 101, error: "Email is unknown" });

        var parseRest = new _ParseRest2.default(req);
        parseRest.get("/users", { where: { username: profile.username } }, { useMasterKey: true }).then(function (users) {
          if (users && users[0]) {
            // Retrieving
            var user = users[0];
            // ban user
            if (user.isBanned) return errorFn({ code: 101, error: "User is banned" });
            // save param
            var _param4 = { socialType: "instagram", authData: authData };
            parseRest.put("/users/" + user.objectId, _param4, { useMasterKey: true }).then(function () {
              // session query
              parseRest.get("/sessions", {
                where: {
                  user: {
                    __type: "Pointer",
                    className: "_User",
                    objectId: user.objectId
                  }
                }
              }, { useMasterKey: true }).then(function (sessions) {
                if (sessions && sessions[0]) {
                  var _session = sessions[0];
                  if (_typeof(req.session) === "object") req.session.sessionToken = _session.sessionToken;
                  // end
                  return _this3.userHandler(req, _extends({}, user, _param4, {
                    sessionToken: _session.sessionToken
                  })).then(function (handledUser) {
                    return res.json(handledUser);
                  });
                }
                // login
                var password = typeof profile.id === "number" ? profile.id.toString() : profile.id;
                return parseRest.put("/users/" + user.objectId, { password: password }, { useMasterKey: true }).then(function () {
                  return parseRest.get("/login", {
                    username: profile.username,
                    password: password
                  }).then(function (result) {
                    // reload
                    parseRest.get("/users/me", null, {
                      "X-Parse-Session-Token": result.sessionToken
                    }).then(function (_user) {
                      // end
                      return _this3.userHandler(req, _extends({}, _user, {
                        sessionToken: result.sessionToken
                      })).then(function (handledUser) {
                        return res.json(handledUser);
                      });
                    }, errorFn);
                  }, errorFn);
                }, errorFn);
              }, errorFn);
            }, errorFn);
          } else {
            // New
            var _user4 = {
              username: profile.username,
              password: typeof profile.id === "number" ? profile.id.toString() : profile.id,
              name: profile.full_name,
              // email: profile.email,
              socialType: "instagram",
              socialProfile: profile,
              profileImage: { url: profile.profile_picture },
              authData: authData
            };
            parseRest.post("/users", _user4, { useMasterKey: true }).then(function (result) {
              // reload
              parseRest.get("/users/me", null, {
                "X-Parse-Session-Token": result.sessionToken
              }).then(function (_user) {
                // end
                return _this3.userHandler(req, _extends({}, _user, {
                  sessionToken: result.sessionToken
                })).then(function (handledUser) {
                  return res.json(handledUser);
                });
              }, errorFn);
            }, errorFn);
          }
        }, errorFn);
      });
    }

    /**
     * @param {String} accessToken
     * @return {Object} parse user
     */

  }, {
    key: "instagramLink",
    value: function instagramLink(req, res) {
      var _this4 = this;

      var _req$body4 = req.body,
          body = _req$body4 === undefined ? {} : _req$body4,
          _req$session4 = req.session,
          session = _req$session4 === undefined ? {} : _req$session4;

      console.log("body", body);
      console.log("session", session);
      var accessToken = body.access_token || session.access_token;
      var userId = body.userId || session.user && session.user.objectId;
      var username = body.username || session.user && session.user.username;
      if (!accessToken) return res.status(500).json({ code: 101, error: "Invalid instagram access_token" }).end();
      if (!userId && !username) return res.status(500).json({ code: 102, error: "Invalid parameter : userId or username" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      this.instaOAuth2.get("https://api.instagram.com/v1/users/self/", accessToken, function (err, data /* , response */) {
        if (err) {
          console.error(err);
          res.send(err);
        } else {
          var profile = JSON.parse(data).data;
          console.log(profile);

          var authData = {
            instagram: {
              id: profile.id,
              access_token: accessToken
            }
          };

          var parseRest = new _ParseRest2.default(req);
          var _where = userId ? { objectId: userId } : { username: username };
          parseRest.get("/users", { where: _where }, { useMasterKey: true }).then(function (users) {
            if (users && users[0]) {
              // Retrieving
              var user = users[0];
              // authData save
              var newAuthData = _extends({}, user.authData, authData);
              return parseRest.put("/users/" + user.objectId, { authData: newAuthData }, { useMasterKey: true }).then(function () {
                // keep
                user.authData = newAuthData;
                // session query
                parseRest.get("/sessions", {
                  where: {
                    user: {
                      __type: "Pointer",
                      className: "_User",
                      objectId: user.objectId
                    }
                  }
                }, { useMasterKey: true }).then(function (sessions) {
                  if (sessions && sessions[0]) {
                    var _session = sessions[0];
                    if (_typeof(req.session) === "object") req.session.sessionToken = _session.sessionToken;
                    // end
                    return _this4.userHandler(req, _extends({}, user, _param, {
                      sessionToken: _session.sessionToken
                    })).then(function (handledUser) {
                      return res.json(handledUser);
                    });
                  }
                  // login
                  var password = typeof profile.id === "number" ? profile.id.toString() : profile.id;
                  return parseRest.put("/users/" + user.objectId, { password: password }, { useMasterKey: true }).then(function () {
                    return parseRest.get("/login", {
                      username: username,
                      password: password
                    }).then(function (result) {
                      // reload
                      parseRest.get("/users/me", null, {
                        "X-Parse-Session-Token": result.sessionToken
                      }).then(function (_user) {
                        // end
                        return _this4.userHandler(req, _extends({}, _user, {
                          sessionToken: result.sessionToken
                        })).then(function (handledUser) {
                          return res.json(handledUser);
                        });
                      }, errorFn);
                    }, errorFn);
                  }, errorFn);
                }, errorFn);
              }, errorFn);
            }
            return errorFn({ code: 101, error: "user not exist" });
          }, errorFn);
        }
      });
    }

    /**
     * @param {String} userId
     * @return {Array} instagram recent media
     */

  }, {
    key: "instagramRecent",
    value: function instagramRecent(req, res) {
      var _this5 = this;

      var _req$query2 = req.query,
          query = _req$query2 === undefined ? {} : _req$query2,
          _req$session5 = req.session,
          session = _req$session5 === undefined ? {} : _req$session5;

      console.log("query", query);
      console.log("session", session);
      var userId = query.userId || session.user && session.user.objectId;
      if (!userId) return res.status(500).json({ code: 102, error: "Invalid parameter : userId" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      var parseRest = new _ParseRest2.default(req);
      parseRest.get("/users", { where: { objectId: userId } }, { useMasterKey: true }).then(function (users) {
        if (users && users[0]) {
          // Retrieving
          var user = users[0];
          // get instagram authData
          var accessToken = user.authData && user.authData.instagram && user.authData.instagram.access_token;
          if (!accessToken) return errorFn({
            code: 101,
            error: "Invalid instagram access_token"
          });

          // get recent
          return _this5.instaOAuth2.get("https://api.instagram.com/v1/users/self/media/recent/", accessToken, function (err, data /* , response */) {
            if (err) {
              return errorFn(err);
            }

            var recent = JSON.parse(data).data;
            // end
            return res.json(recent);
          });
        }
        return errorFn("user not exist");
      });
    }

    //
    // naver
    //

  }, {
    key: "naverAuth",
    value: function naverAuth(req, res) {
      // For eg. "http://localhost:3000/naver/callback"
      var params = {
        redirect_uri: makeRedirectUri(req, this.naverRedirectUri),
        response_type: "code"
      };
      console.log("params", params);
      return res.redirect(this.naverOAuth2.getAuthorizeUrl(params));
    }
  }, {
    key: "naverCallback",
    value: function naverCallback(req, res) {
      if (req.error_reason) {
        res.send(req.error_reason);
      }
      if (req.query && req.query.code) {
        // For eg. "/naver/callback"
        this.naverOAuth2.getOAuthAccessToken(req.query.code, {
          grant_type: "authorization_code",
          redirect_uri: makeRedirectUri(req, this.naverRedirectUri)
        }, function (err, accessToken, refreshToken, params) {
          if (err) {
            console.error(err);
            return res.send(err);
          }

          var naverAuth = {
            access_token: accessToken,
            expiration_date: params.expires_in
          };
          // when custom callback
          return callbackResult(req, res, naverAuth);
        });
      }
    }

    /**
     * @param {String} accessToken
     * @return {Object} parse user
     */

  }, {
    key: "naverLogin",
    value: function naverLogin(req, res) {
      var _this6 = this;

      var _req$body5 = req.body,
          body = _req$body5 === undefined ? {} : _req$body5,
          _req$session6 = req.session,
          session = _req$session6 === undefined ? {} : _req$session6;

      console.log("body", body);
      console.log("session", session);
      var accessToken = body.access_token || session.access_token;
      var expires = body.expiration_date || session.expiration_date;
      if (!accessToken) return res.status(500).json({ code: 101, error: "Invalid naver access_token" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      // https://developers.naver.com/docs/login/profile/
      this.naverOAuth2.get("https://openapi.naver.com/v1/nid/me", accessToken, function (err, data /* , response */
      ) {
        if (err) {
          return errorFn(err);
        }

        var profile = JSON.parse(data).response;
        console.log(profile);

        var authDataEtc = {
          naver: {
            id: profile.id,
            access_token: accessToken,
            expiration_date: expires
          }
        };

        if (!profile.email) return errorFn({ code: 101, error: "Email is unknown" });

        var parseRest = new _ParseRest2.default(req);
        parseRest.get("/users", { where: { username: profile.email } }, { useMasterKey: true }).then(function (users) {
          if (users && users[0]) {
            // Retrieving
            var user = users[0];
            // ban user
            if (user.isBanned) return errorFn({ code: 101, error: "User is banned" });
            // save param
            var _param5 = { socialType: "naver", authDataEtc: authDataEtc };
            parseRest.put("/users/" + user.objectId, _param5, { useMasterKey: true }).then(function () {
              // session query
              parseRest.get("/sessions", {
                where: {
                  user: {
                    __type: "Pointer",
                    className: "_User",
                    objectId: user.objectId
                  }
                }
              }, { useMasterKey: true }).then(function (sessions) {
                if (sessions && sessions[0]) {
                  var _session = sessions[0];
                  if (_typeof(req.session) === "object") req.session.sessionToken = _session.sessionToken;
                  // end
                  return _this6.userHandler(req, _extends({}, user, _param5, {
                    sessionToken: _session.sessionToken
                  })).then(function (handledUser) {
                    return res.json(handledUser);
                  });
                }
                // login
                var password = typeof profile.id === "number" ? profile.id.toString() : profile.id;
                return parseRest.put("/users/" + user.objectId, { password: password }, { useMasterKey: true }).then(function () {
                  return parseRest.get("/login", {
                    username: profile.email,
                    password: password
                  }).then(function (result) {
                    // reload
                    parseRest.get("/users/me", null, {
                      "X-Parse-Session-Token": result.sessionToken
                    }).then(function (_user) {
                      // end
                      return _this6.userHandler(req, _extends({}, _user, {
                        sessionToken: result.sessionToken
                      })).then(function (handledUser) {
                        return res.json(handledUser);
                      });
                    }, errorFn);
                  }, errorFn);
                }, errorFn);
              }, errorFn);
            }, errorFn);
          } else {
            // New
            var _user5 = {
              username: profile.email,
              password: typeof profile.id === "number" ? profile.id.toString() : profile.id,
              name: profile.name,
              email: profile.email,
              socialType: "naver",
              socialProfile: profile,
              profileImage: { url: profile.profile_image },
              authDataEtc: authDataEtc
            };
            parseRest.post("/users", _user5, { useMasterKey: true }).then(function (result) {
              // reload
              parseRest.get("/users/me", null, {
                "X-Parse-Session-Token": result.sessionToken
              }).then(function (_user) {
                // end
                return _this6.userHandler(req, _extends({}, _user, {
                  sessionToken: result.sessionToken
                })).then(function (handledUser) {
                  return res.json(handledUser);
                });
              }, errorFn);
            }, errorFn);
          }
        }, errorFn);
      });
    }

    //
    // daum
    //

  }, {
    key: "daumAuth",
    value: function daumAuth(req, res) {
      // For eg. "http://localhost:3000/daum/callback"
      var params = {
        redirect_uri: makeRedirectUri(req, this.daumRedirectUri),
        response_type: "code"
      };
      console.log("params", params);
      return res.redirect(this.daumOAuth2.getAuthorizeUrl(params));
    }
  }, {
    key: "daumCallback",
    value: function daumCallback(req, res) {
      if (req.error_reason) {
        res.send(req.error_reason);
      }
      if (req.query && req.query.code) {
        // For eg. "/daum/callback"
        this.daumOAuth2.getOAuthAccessToken(req.query.code, {
          grant_type: "authorization_code",
          redirect_uri: makeRedirectUri(req, this.daumRedirectUri)
        }, function (err, accessToken, refreshToken, params) {
          if (err) {
            console.error(err);
            return res.send(err);
          }

          var daumAuth = {
            access_token: accessToken,
            expiration_date: params.expires_in
          };
          // when custom callback
          return callbackResult(req, res, daumAuth);
        });
      }
    }

    /**
     * @param {String} accessToken
     * @return {Object} parse user
     */

  }, {
    key: "daumLogin",
    value: function daumLogin(req, res) {
      var _this7 = this;

      var _req$body6 = req.body,
          body = _req$body6 === undefined ? {} : _req$body6,
          _req$session7 = req.session,
          session = _req$session7 === undefined ? {} : _req$session7;

      console.log("body", body);
      console.log("session", session);
      var accessToken = body.access_token || session.access_token;
      var expires = body.expiration_date || session.expiration_date;
      if (!accessToken) return res.status(500).json({ code: 101, error: "Invalid daum access_token" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      // https://developers.daum.net/services/apis/user/v1/show.format
      this.daumOAuth2.get("https://apis.daum.net/user/v1/show.json", accessToken, function (err, data /* , response */) {
        if (err) {
          return errorFn(err);
        }

        var profile = JSON.parse(data).result;
        console.log(profile);

        var authDataEtc = {
          daum: {
            id: profile.id,
            access_token: accessToken,
            expiration_date: expires
          }
        };

        if (!profile.userid) return errorFn({ code: 101, error: "Email is unknown" });

        if (req.headers) req.headers.sessionToken = null;
        if (req.session) req.session.sessionToken = null;
        var parseRest = new _ParseRest2.default(req);
        parseRest.get("/users", { where: { username: profile.userid } }, { useMasterKey: true }).then(function (users) {
          if (users && users[0]) {
            // Retrieving
            var user = users[0];
            // ban user
            if (user.isBanned) return errorFn({ code: 101, error: "User is banned" });
            // save param
            var _param6 = { socialType: "daum", authDataEtc: authDataEtc };
            parseRest.put("/users/" + user.objectId, _param6, { useMasterKey: true }).then(function () {
              // session query
              parseRest.get("/sessions", {
                where: {
                  user: {
                    __type: "Pointer",
                    className: "_User",
                    objectId: user.objectId
                  }
                }
              }, { useMasterKey: true }).then(function (sessions) {
                if (sessions && sessions[0]) {
                  var _session = sessions[0];
                  if (_typeof(req.session) === "object") req.session.sessionToken = _session.sessionToken;
                  // end
                  return _this7.userHandler(req, _extends({}, user, _param6, {
                    sessionToken: _session.sessionToken
                  })).then(function (handledUser) {
                    return res.json(handledUser);
                  });
                }
                // login
                var password = typeof profile.id === "number" ? profile.id.toString() : profile.id;
                return parseRest.put("/users/" + user.objectId, { password: password }, { useMasterKey: true }).then(function () {
                  return parseRest.get("/login", {
                    username: profile.userid,
                    password: password
                  }).then(function (result) {
                    // reload
                    parseRest.get("/users/me", null, {
                      "X-Parse-Session-Token": result.sessionToken
                    }).then(function (_user) {
                      // end
                      return _this7.userHandler(req, _extends({}, _user, {
                        sessionToken: result.sessionToken
                      })).then(function (handledUser) {
                        return res.json(handledUser);
                      });
                    }, errorFn);
                  }, errorFn);
                }, errorFn);
              }, errorFn);
            }, errorFn);
          } else {
            // New
            var _user6 = {
              username: profile.userid,
              password: typeof profile.id === "number" ? profile.id.toString() : profile.id,
              name: profile.nickname,
              // email: profile.email,
              socialType: "daum",
              socialProfile: profile,
              profileImage: { url: profile.imagePath },
              authDataEtc: authDataEtc
            };
            parseRest.post("/users", _user6, { useMasterKey: true }).then(function (result) {
              // reload
              parseRest.get("/users/me", null, {
                "X-Parse-Session-Token": result.sessionToken
              }).then(function (_user) {
                // end
                return _this7.userHandler(req, _extends({}, _user, {
                  sessionToken: result.sessionToken
                })).then(function (handledUser) {
                  return res.json(handledUser);
                });
              }, errorFn);
            }, errorFn);
          }
        }, errorFn);
      });
    }

    //
    // kakao
    //

  }, {
    key: "kakaoAuth",
    value: function kakaoAuth(req, res) {
      // For eg. "http://localhost:3000/kakao/callback"
      var params = {
        redirect_uri: makeRedirectUri(req, this.kakaoRedirectUri),
        response_type: "code"
      };
      console.log("params", params);
      return res.redirect(this.kakaoOAuth2.getAuthorizeUrl(params));
    }
  }, {
    key: "kakaoCallback",
    value: function kakaoCallback(req, res) {
      if (req.error_reason) {
        res.send(req.error_reason);
      }
      if (req.query && req.query.code) {
        // For eg. "/kakao/callback"
        this.kakaoOAuth2.getOAuthAccessToken(req.query.code, {
          grant_type: "authorization_code",
          redirect_uri: makeRedirectUri(req, this.kakaoRedirectUri)
        }, function (err, accessToken, refreshToken, params) {
          if (err) {
            console.error(err);
            return res.send(err);
          }

          var kakaoAuth = {
            access_token: accessToken,
            expiration_date: params.expires_in
          };
          // when custom callback
          return callbackResult(req, res, kakaoAuth);
        });
      }
    }

    /**
     * @param {String} accessToken
     * @return {Object} parse user
     */

  }, {
    key: "kakaoLogin",
    value: function kakaoLogin(req, res) {
      var _this8 = this;

      var _req$body7 = req.body,
          body = _req$body7 === undefined ? {} : _req$body7,
          _req$session8 = req.session,
          session = _req$session8 === undefined ? {} : _req$session8;

      console.log("body", body);
      console.log("session", session);
      var accessToken = body.access_token || session.access_token;
      var expires = body.expiration_date || session.expiration_date;
      if (!accessToken) return res.status(500).json({ code: 101, error: "Invalid kakao access_token" }).end();

      function errorFn(err) {
        console.error(err);
        return res.status(500).json(err).end();
      }

      // https://developers.kakao.com/docs/restapi/user-management#%EB%A1%9C%EA%B7%B8%EC%9D%B8
      this.kakaoOAuth2.get("https://kapi.kakao.com/v1/user/me", accessToken, function (err, data /* , response */
      ) {
        if (err) {
          return errorFn(err);
        }

        var profile = JSON.parse(data);
        console.log(profile);

        var authDataEtc = {
          kakao: {
            id: profile.id,
            access_token: accessToken,
            expiration_date: expires
          }
        };

        if (!profile.kaccount_email && !profile.id) return errorFn({ code: 101, error: "Email is unknown" });

        if (req.headers) req.headers.sessionToken = null;
        if (req.session) req.session.sessionToken = null;
        var parseRest = new _ParseRest2.default(req);
        parseRest.get("/users", { where: { username: profile.kaccount_email || profile.id } }, { useMasterKey: true }).then(function (users) {
          if (users && users[0]) {
            // Retrieving
            var user = users[0];
            // ban user
            if (user.isBanned) return errorFn({ code: 101, error: "User is banned" });
            // save param
            var _param7 = { socialType: "kakao", authDataEtc: authDataEtc };
            parseRest.put("/users/" + user.objectId, _param7, { useMasterKey: true }).then(function () {
              // session query
              parseRest.get("/sessions", {
                where: {
                  user: {
                    __type: "Pointer",
                    className: "_User",
                    objectId: user.objectId
                  }
                }
              }, { useMasterKey: true }).then(function (sessions) {
                if (sessions && sessions[0]) {
                  var _session = sessions[0];
                  if (_typeof(req.session) === "object") req.session.sessionToken = _session.sessionToken;
                  // end
                  return _this8.userHandler(req, _extends({}, user, _param7, {
                    sessionToken: _session.sessionToken
                  })).then(function (handledUser) {
                    return res.json(handledUser);
                  });
                }
                // login
                var password = typeof profile.id === "number" ? profile.id.toString() : profile.id;
                return parseRest.put("/users/" + user.objectId, { password: password }, { useMasterKey: true }).then(function () {
                  return parseRest.get("/login", {
                    username: profile.kaccount_email || profile.id,
                    password: password
                  }).then(function (result) {
                    // reload
                    parseRest.get("/users/me", null, {
                      "X-Parse-Session-Token": result.sessionToken
                    }).then(function (_user) {
                      // end
                      return _this8.userHandler(req, _extends({}, _user, {
                        sessionToken: result.sessionToken
                      })).then(function (handledUser) {
                        return res.json(handledUser);
                      });
                    }, errorFn);
                  }, errorFn);
                }, errorFn);
              }, errorFn);
            }, errorFn);
          } else {
            // New
            var _user7 = {
              username: profile.kaccount_email || profile.id,
              password: typeof profile.id === "number" ? profile.id.toString() : profile.id,
              name: profile.properties.nickname,
              // email: profile.email,
              socialType: "kakao",
              socialProfile: profile,
              profileImage: { url: profile.properties.profile_image },
              authDataEtc: authDataEtc
            };
            parseRest.post("/users", _user7, { useMasterKey: true }).then(function (result) {
              // reload
              parseRest.get("/users/me", null, {
                "X-Parse-Session-Token": result.sessionToken
              }).then(function (_user) {
                // end
                return _this8.userHandler(req, _extends({}, _user, {
                  sessionToken: result.sessionToken
                })).then(function (handledUser) {
                  return res.json(handledUser);
                });
              }, errorFn);
            }, errorFn);
          }
        }, errorFn);
      });
    }
  }]);

  return SocialOAuth2;
}();

exports.default = SocialOAuth2;